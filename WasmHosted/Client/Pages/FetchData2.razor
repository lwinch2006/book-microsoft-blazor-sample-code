@page "/fetchdata2"
@layout NestedLayout

@using WasmHosted.Shared
@using WasmHosted.Shared.Services
@using ComponentsLibrary

@inject IApiClientFactory _apiClientFactory

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>
<h2>Templated component</h2>

<p>This component demonstrates fetching data from the server.</p>


@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <TableComponent Items="@forecasts" TItem="WeatherForecast">
        <Header>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </Header>
        <Row Context="forecast">
            <td>@forecast.Date</td>
            <td>@forecast.TemperatureC</td>
            <td>@(forecast.TemperatureC > 0 ? forecast.TemperatureF : throw new DivideByZeroException())</td>
            <td>@forecast.Summary</td>
        </Row>
        <Footer>
            <td>Spring is in the air</td>
        </Footer>
    </TableComponent>


    <h2>Razor templates</h2>

    <ListComponent Items="@forecasts">
        <ItemTemplate>
            @_forecastTemplate(context)
        </ItemTemplate>
    </ListComponent>

    <h2>Wig Pig syntax</h2>

    <ListComponent2 Items="@forecasts">
        <ListTemplate Context="innerTemplate">
            <ol>@innerTemplate</ol>
        </ListTemplate>
        <ItemTemplate Context="forecast">
            <li>@forecast.Summary</li>
        </ItemTemplate>
    </ListComponent2>
}




@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var apiClient = _apiClientFactory.Create();
        forecasts = await apiClient.GetWeatherForecast();
    }

    private readonly RenderFragment<WeatherForecast> _forecastTemplate = (forecast) => @<span>@forecast.Summary</span>;

}