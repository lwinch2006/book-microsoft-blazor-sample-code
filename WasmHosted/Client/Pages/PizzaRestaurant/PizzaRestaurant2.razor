@page "/pizzarestaurant2"
@using System.Net
@using ComponentsLibrary.Models
@using WasmHosted.Shared.ViewModels.PizzaRestaurant

@inject HttpClient _httpClient
@inject StateVm _state
@inject NavigationManager _navigationManager

<h3>Welcome to Pizza Restaurant</h3>

@if (!_state.MenuVm.Pizzas.Any())
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <PizzaList
        Title="Our selection of pizzas"
        Pizzas="@_state.MenuVm.Pizzas"
        ButtonTitle="Add"
        ButtonClass="btn btn-success"
        Selected="@AddToBasket"
        ShowPizzaInformation="@ShowPizzaInformation"/>
    
    <ShoppingBasket
        OrderedPizzas="@_state.BasketVm.Pizzas.Select(t => _state.MenuVm.GetPizza(t))"
        Selected="RemoveFromBasket"/>

    <CustomerEntry
        Title="Please enter your details below"
        @bind-Customer="@_state.BasketVm.Customer"
        ValidSubmit="Checkout" />
    
    <MapComponent Zoom="17" CssClass="mapComponent" Markers="@_markers" />
}

@if (DebuggerExtensions.IsDebug())
{
    <br />
    @_state.ToJson()
}

@code {
    //private readonly StateVm _state = new();

    private readonly IEnumerable<MapMarker> _markers = new[]
    {
        new MapMarker
        {
            Description = "Pizza restaurant", 
            X = 4.29660, 
            Y = 50.88022, 
            ShowPopup = false
        }, 
        new MapMarker
        { 
            Description = "You", 
            X = 4.27638, 
            Y = 50.87136, 
            ShowPopup = true 
        }
    };

    protected override async Task OnInitializedAsync()
    {
        _state.MenuVm = (await _httpClient.GetFromJsonAsync<MenuVm>("PizzaRestaurant/Menu"))!;
    }

    private void AddToBasket(PizzaVm pizzaVm)
    {
        _state.BasketVm.Pizzas.Add(pizzaVm.Id);
    }

    private void RemoveFromBasket(PizzaVm pizzaVm)
    {
        _state.BasketVm.Pizzas.Remove(pizzaVm.Id);
    }

    private async Task Checkout()
    {
        var messageTemplate = "Order for {0} pizza(s) ({1}) for {2} at {3} {4} received";

        var pizzaNumber = _state.BasketVm.Pizzas.Count;
        var customerName = _state.BasketVm.Customer.Name;
        var street = _state.BasketVm.Customer.Street;
        var city = _state.BasketVm.Customer.City;

        var pizzaSpec = string.Empty;

        _state.BasketVm.Pizzas.GroupBy(t => t).Select(t =>
        {
            pizzaSpec += $"{t.Count()} x {_state.MenuVm.GetPizza(t.Key)!.Name}, ";
            return t;
        }).ToList();

        pizzaSpec.Trim(' ').Trim(',');

        var message = string.Format(messageTemplate, pizzaNumber, pizzaSpec, customerName, street, city);

        var response = await _httpClient.PostAsJsonAsync("PizzaRestaurant/Orders", _state.BasketVm);

        if (response.StatusCode == HttpStatusCode.Created)
        {
            Console.WriteLine(message);
        }
        else
        {
            Console.WriteLine("Order creating error");
        }
    }

    private void ShowPizzaInformation(PizzaVm pizza)
    {
        Console.WriteLine("Showing details about pizza {0}", pizza.Name);
        _state.CurrentPizza = pizza;
        Task.Run(() => _navigationManager.NavigateTo("pizzarestaurant2/details"));
    }
}