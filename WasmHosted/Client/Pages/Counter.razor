@page "/counter"
@page "/counter/{CurrentCount:int?}"
@using WasmHosted.Client.Services

@inject NavigationManager _navigationManager
@inject ILocalStorage _localStorage
@inject IFocusService _focusService

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @CurrentCount</p>
<div class="row g-3 mb-3">
    <div class="col-4">
        <label>Increment with bind</label>
        <input @ref="_elementReference" type="number" class="form-control" @bind="@_increment" @bind:event="oninput" @onkeypress="KeyPressHandler" @onkeypress:preventDefault/>
    </div>
    <div class="col-8"></div>
    <div class="col-4">
        <label>Increment with event</label>
        <input type="number" class="form-control" value="@_increment" @onchange="@(e => _increment = int.Parse((string)e.Value!))"/>
    </div>
    <div class="col-8"></div>
    <div class="col-4">
        <button class="btn btn-primary" @onclick="IncrementCount">Manual increment</button>
        <button class="btn btn-secondary" @onclick="AutoIncrement">Auto increment</button>
    </div>
</div>

<div style="width: 200px; height: 200px; background-color: yellow; margin-bottom: 1rem;" @onmousemove="OuterMouseMoveHandler">
    @_outerMousePosition
    <div style="width: 100px; height: 100px; background-color: green;" @onmousemove="InnerMouseMoveHandler" @onmousemove:stopPropagation>
        @_innerMousePosition
    </div>
</div>

<div class="mb-3">
    <input class="form-control" @bind="@_currentDate" @bind:format="dd.MM.yyyy" />
</div>

<div class="mb-3">
    <p>
        Navigation with plain anchor (a)
    </p>
    <a class="btn btn-link" href="/">Go to home</a>
</div>

<div>
    <p>
        Navigation with NavigationManager
    </p>
    <button type="button" class="btn btn-success" @onclick="StartCountWith50">Start with count 50</button>
</div>



@code {
    private int? _currentCountToOverride;
    private int _increment = 1;
    private DateTime _currentDate = DateTime.Now;
    
    private string _outerMousePosition = "no set yet";
    private string _innerMousePosition = "no set yet";

    private ElementReference? _elementReference;

    [Parameter]
    public int CurrentCount { get; set; }

    [JSInvokable]
    public async Task UpdateCounter()
    {
        try
        {
            CurrentCount = await _localStorage.GetProperty<int>(nameof(CurrentCount));
            StateHasChanged();
        }
        catch 
        {
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue(nameof(CurrentCount), out int currentCount))
        {
            _currentCountToOverride = currentCount;
        }
        
        return base.SetParametersAsync(parameters);
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await _localStorage.Init();
            if (_currentCountToOverride.HasValue)
            {
                await _localStorage.SetProperty(nameof(CurrentCount), CurrentCount);
                CurrentCount = _currentCountToOverride.Value;
            }
            else
            {
                CurrentCount = await _localStorage.GetProperty<int>(nameof(CurrentCount));
            }
        }
        catch 
        {
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParametersSetAsync: {0}", CurrentCount);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_elementReference is not null)
            {
                await _focusService.Focus(_elementReference.Value);
                // OR build-in extension method
                // await _elementReference.Value.FocusAsync();
            }

            var objRef = DotNetObjectReference.Create(this);
            await _localStorage.Init();
            await _localStorage.Watch(objRef);
        }
    }

    private async Task IncrementCount(MouseEventArgs args)
    {
        CurrentCount += args.MetaKey ? -_increment : _increment;
        await _localStorage.SetProperty(nameof(CurrentCount), CurrentCount);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private void KeyPressHandler(KeyboardEventArgs e)
    {
        if (e.Key == "+")
        {
            _increment++;
        }
        else if (e.Key == "-")
        {
            _increment--;
        }
    }

    private void OuterMouseMoveHandler(MouseEventArgs e)
    {
        _outerMousePosition = $"{e.ClientX}x{e.ClientY}";
    }

    private void InnerMouseMoveHandler(MouseEventArgs e)
    {
        _innerMousePosition = $"{e.ClientX}x{e.ClientY}";
    }

    private void AutoIncrement()
    {
        new Timer(
            callback: async (_) =>
            {
                var args = new MouseEventArgs();
                await IncrementCount(args);
                StateHasChanged();
            },
            state: null,
            dueTime: TimeSpan.FromSeconds(1),
            period: TimeSpan.FromSeconds(1));
        
    }

    private void StartCountWith50()
    {
        _navigationManager.NavigateTo("/counter/50");
    }
}