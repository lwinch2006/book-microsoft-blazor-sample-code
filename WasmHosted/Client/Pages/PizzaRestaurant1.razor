@page "/pizzarestaurant1"
@using WasmHosted.Shared.Models
@using WasmHosted.Shared.ViewModels.PizzaRestaurant

<h3>Welcome to Pizza Restaurant</h3>

@foreach (var pizza in _stateVm.MenuVm.Pizzas)
{
    <div class="row mb-3 align-items-center">
        <div class="col">
            @pizza.Name
        </div>
        <div class="col text-right">
            @pizza.Price.ToString("0.00")
        </div>
        <div class="col"></div>
        <div class="col">
            <img src="images/@(pizza.Spiciness.ToString().ToLower()).jpg" alt="@pizza.Spiciness" style="max-height: 32px;"/>
        </div>
        <div class="col">
            <button class="btn btn-success pl-4 pr-4" @onclick="@(() => AddToBasket(pizza))">Add</button>
        </div>
    </div>
}

@if (_stateVm.BasketVm.Pizzas.Any())
{
    <h1>Your current order</h1>

    @foreach (var (pizza, pos) in _stateVm.BasketVm.Pizzas.Select((id, pos) => (_stateVm.MenuVm.GetPizza(id), pos)))
    {
        <div class="row mb-3 align-items-center">
            <div class="col">
                @pizza.Name
            </div>
            <div class="col text-right">
                @pizza.Price.ToString("0.00");
            </div>
            <div class="col"></div>
            <div class="col"></div>
            <div class="col">
                <button class="btn btn-danger" @onclick="@((_) => RemoveFromBasket(pizza))">Remove</button>
            </div>
        </div>
    }

    <div class="row">
        <div class="col"></div>
        <div class="col">
            <hr/>
        </div>
        <div class="col"></div>
        <div class="col"></div>
    </div>

    <div class="row">
        <div class="col"></div>
        <div class="col">
            Total:
        </div>
        <div class="col text-right font-weight-bold">
            @_stateVm.TotalPrice.ToString("0.00");
        </div>
        <div class="col"></div>
        <div class="col"></div>
    </div>
}

<h1>Please enter your details below</h1>

<EditForm Model="@_stateVm.BasketVm.Customer" OnValidSubmit="Checkout">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <fieldset>
        <div class="row mb-3">
            <label for="Name" class="col-2">Name</label>
            <div class="col-6">
                <InputText id="Name" class="form-control" @bind-Value="@_stateVm.BasketVm.Customer.Name"></InputText>
                <ValidationMessage For="@(() => _stateVm.BasketVm.Customer.Name)"/>
            </div>
        </div>
        <div class="row mb-3">
            <label for="Street" class="col-2">Street</label>
            <div class="col-6">
                <InputText id="Street" class="form-control" @bind-Value="@_stateVm.BasketVm.Customer.Street"></InputText>
                <ValidationMessage For="@(() => _stateVm.BasketVm.Customer.Street)"/>
            </div>
        </div>
        <div class="row mb-3">
            <label for="City" class="col-2">City</label>
            <div class="col-6">
                <InputText id="City" class="form-control" @bind-Value="@_stateVm.BasketVm.Customer.City"></InputText>
                <ValidationMessage For="@(() => _stateVm.BasketVm.Customer.City)"/>
            </div>
        </div>
        <button class="btn btn-success mb-3">Checkout</button>
    </fieldset>
</EditForm>

@if (DebuggerExtensions.IsDebug())
{
    @_stateVm.ToJson()
}

@code {
    private readonly StateVm _stateVm = new StateVm();

    protected override void OnInitialized()
    {
        _stateVm.MenuVm.AddPizza(new PizzaVm
        { Id = 1, Name = "Pepperoni", Price = 8.99M, Spiciness = SpicinessTypes.Spicy });
        _stateVm.MenuVm.AddPizza(new PizzaVm
        { Id = 2, Name = "Margarita", Price = 7.99M, Spiciness = SpicinessTypes.None });
        _stateVm.MenuVm.AddPizza(new PizzaVm
        { Id = 3, Name = "Diabolo", Price = 9.99M, Spiciness = SpicinessTypes.Hot });
    }

    private void AddToBasket(PizzaVm pizzaVm)
    {
        _stateVm.BasketVm.Pizzas.Add(pizzaVm.Id);
    }

    private void RemoveFromBasket(PizzaVm pizzaVm)
    {
        _stateVm.BasketVm.Pizzas.Remove(pizzaVm.Id);
    }

    private void Checkout()
    {
        var messageTemplate = "Order for {0} pizza(s) ({1}) for {2} at {3} {4} received";

        var pizzaNumber = _stateVm.BasketVm.Pizzas.Count;
        var customerName = _stateVm.BasketVm.Customer.Name;
        var street = _stateVm.BasketVm.Customer.Street;
        var city = _stateVm.BasketVm.Customer.City;

        var pizzaSpec = string.Empty;

        _stateVm.BasketVm.Pizzas.GroupBy(t => t).Select(t =>
        {
            pizzaSpec += $"{t.Count()} x {_stateVm.MenuVm.GetPizza(t.Key)!.Name}, ";
            return t;
        }).ToList();

        pizzaSpec.Trim(' ').Trim(',');

        var message = string.Format(messageTemplate, pizzaNumber, pizzaSpec, customerName, street, city);

        Console.WriteLine(message);
    }

}